{"id":"42a78723583da1b6390baeac2006bb39","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/zkSync_SimpleStorage.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ncontract SimpleStorage {\r\n    struct Person{\r\n        uint fn;\r\n        string name;\r\n    }\r\n    Person[] listOfPeople;\r\n    mapping (string=>uint) public nametofn;\r\n    function addPeople(uint _fn, string memory _name) public {\r\n        listOfPeople.push(Person(_fn,_name));\r\n        nametofn[_name] = _fn;\r\n    }\r\n\r\n    function getFavoriteNumber(string memory _name) public view returns (uint) {\r\n        return nametofn[_name];\r\n    }\r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/zkSync_SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/zkSync_SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[50]},"id":51,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"33:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":50,"linearizedBaseContracts":[50],"name":"SimpleStorage","nameLocation":"70:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"SimpleStorage.Person","id":6,"members":[{"constant":false,"id":3,"mutability":"mutable","name":"fn","nameLocation":"120:2:0","nodeType":"VariableDeclaration","scope":6,"src":"115:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint","nodeType":"ElementaryTypeName","src":"115:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5,"mutability":"mutable","name":"name","nameLocation":"140:4:0","nodeType":"VariableDeclaration","scope":6,"src":"133:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4,"name":"string","nodeType":"ElementaryTypeName","src":"133:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Person","nameLocation":"98:6:0","nodeType":"StructDefinition","scope":50,"src":"91:61:0","visibility":"public"},{"constant":false,"id":10,"mutability":"mutable","name":"listOfPeople","nameLocation":"167:12:0","nodeType":"VariableDeclaration","scope":50,"src":"158:21:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$6_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":8,"nodeType":"UserDefinedTypeName","pathNode":{"id":7,"name":"Person","nameLocations":["158:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":6,"src":"158:6:0"},"referencedDeclaration":6,"src":"158:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$6_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":9,"nodeType":"ArrayTypeName","src":"158:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$6_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"internal"},{"constant":false,"functionSelector":"f28600d9","id":14,"mutability":"mutable","name":"nametofn","nameLocation":"216:8:0","nodeType":"VariableDeclaration","scope":50,"src":"186:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":13,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":11,"name":"string","nodeType":"ElementaryTypeName","src":"195:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"186:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":12,"name":"uint","nodeType":"ElementaryTypeName","src":"203:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":36,"nodeType":"Block","src":"288:87:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":25,"name":"_fn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"324:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":26,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"328:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":24,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"317:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$6_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"317:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$6_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$6_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":21,"name":"listOfPeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"299:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$6_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"312:4:0","memberName":"push","nodeType":"MemberAccess","src":"299:17:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$6_storage_$dyn_storage_ptr_$_t_struct$_Person_$6_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$6_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"299:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"299:36:0"},{"expression":{"id":34,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":30,"name":"nametofn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"346:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":32,"indexExpression":{"id":31,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"355:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"346:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":33,"name":"_fn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"364:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"346:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":35,"nodeType":"ExpressionStatement","src":"346:21:0"}]},"functionSelector":"8f7d59b8","id":37,"implemented":true,"kind":"function","modifiers":[],"name":"addPeople","nameLocation":"240:9:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"_fn","nameLocation":"255:3:0","nodeType":"VariableDeclaration","scope":37,"src":"250:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint","nodeType":"ElementaryTypeName","src":"250:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"_name","nameLocation":"274:5:0","nodeType":"VariableDeclaration","scope":37,"src":"260:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":17,"name":"string","nodeType":"ElementaryTypeName","src":"260:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"249:31:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"288:0:0"},"scope":50,"src":"231:144:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":48,"nodeType":"Block","src":"458:41:0","statements":[{"expression":{"baseExpression":{"id":44,"name":"nametofn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"476:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":46,"indexExpression":{"id":45,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"485:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"476:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":43,"id":47,"nodeType":"Return","src":"469:22:0"}]},"functionSelector":"79098398","id":49,"implemented":true,"kind":"function","modifiers":[],"name":"getFavoriteNumber","nameLocation":"392:17:0","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"_name","nameLocation":"424:5:0","nodeType":"VariableDeclaration","scope":49,"src":"410:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":38,"name":"string","nodeType":"ElementaryTypeName","src":"410:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"409:21:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":49,"src":"452:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint","nodeType":"ElementaryTypeName","src":"452:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"451:6:0"},"scope":50,"src":"383:116:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":51,"src":"61:441:0","usedErrors":[],"usedEvents":[]}],"src":"33:469:0"}}},"contracts":{"contracts/zkSync_SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"uint256","name":"_fn","type":"uint256"},{"internalType":"string","name":"_name","type":"string"}],"name":"addPeople","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"getFavoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nametofn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addPeople\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getFavoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nametofn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zkSync_SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/zkSync_SimpleStorage.sol\":{\"keccak256\":\"0xf0b5cd32dec805bd108f46ceda2f522c5e3acf18daa678e34f2715eb5046a742\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c385ef5813f41f7a421d5127417ae805fe9cf96863f438aec4c1d1f949260ae9\",\"dweb:/ipfs/QmaFhnRL37d9U4pLdHEWafjrhYsH4aCjL1edbab7GKVfDF\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"zkSync_SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.eq\t@.BB0_47\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_12\n\tsub.s!\t@CPI0_4[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_10\n\tjump\t@.BB0_2\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_47:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n.BB0_10:\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_5[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tnear_call\tr0, @packed_hashed_string_uint256_to_string_uint, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r9\n\tptr.add.s\t36, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_5[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_7[0], r3, r7\n\tjump.ge\t@.BB0_17\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_8[0], r7, r8\n\tjump.le\t@.BB0_20\n.BB0_17:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_20:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.le\t@.BB0_21\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r1\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_50\n\tadd\tr0, r0, r6\n.BB0_23:\n\tshl.s\t5, r6, r7\n\tptr.add\tr1, r7, r8\n\tld\tr8, r8\n\tadd\t160, r7, r7\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_23\n.BB0_50:\n\tsub!\tr2, r0, r6\n\tjump.eq\t@.BB0_25\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tshl.s\t3, r2, r2\n\tadd\t160, r5, r5\n\tld.1\tr5, r6\n\tshl\tr6, r2, r6\n\tshr\tr6, r2, r6\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_25:\n\tadd\t160, r3, r1\n\tst.1\tr1, r0\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.gt\t@.BB0_17\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r9, r2\n\tst.1\tr2, r4\n\tsload\tr0, r3\n\tsub.s!\t@CPI0_5[0], r3, r4\n\tjump.gt\t@.BB0_17\n\tadd\t1, r3, r4\n\tsstore\tr0, r4\n\tst.1\t0, r0\n\tld.1\tr1, r1\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_10[0], r3, r4\n\tsstore\tr4, r1\n\tadd\t@CPI0_11[0], r3, r4\n\tld.1\tr2, r3\n\tld.1.inc\tr3, r5, r6\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_17\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r7\n\tadd.ne\tr1, r0, r7\n\tsub.s!\t31, r7, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_30\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_30:\n\tadd\tr6, r0, stack-[2]\n\tadd\tr3, r0, stack-[1]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr9, r0, stack-[5]\n\tadd\tr7, r0, stack-[3]\n\tsub.s!\t32, r7, r1\n\tadd\tr4, r0, stack-[6]\n\tadd\tr5, r0, stack-[7]\n\tjump.lt\t@.BB0_33\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[6], r0, r4\n\tjump.ge\t@.BB0_33\n.BB0_34:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_34\n.BB0_33:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_44\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[7], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_39\n\tadd\t32, r0, r2\n\tjump\t@.BB0_41\n.BB0_44:\n\tsub!\tstack-[7], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_46\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB0_46:\n\tadd\tstack-[7], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB0_35\n.BB0_39:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[1], r0, r6\n.BB0_40:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_40\n.BB0_41:\n\tsub.s!\tstack-[7], r3, r3\n\tjump.ge\t@.BB0_43\n\tadd\tstack-[7], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[1], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_43:\n\tadd\t1, r0, r1\n\tadd\tstack-[7], r0, r2\n\tshl.s\t1, r2, r2\n.BB0_35:\n\tor\tr2, r1, r1\n\tadd\tstack-[6], r0, r2\n\tsstore\tr2, r1\n\tadd\t128, r0, r1\n\tnear_call\tr0, @packed_hashed_string_uint256_to_string_uint, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_decode_string:\n.func_begin1:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI1_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI1_0[0], r2, r6\n\tand\t@CPI1_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI1_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB1_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI1_1[0], r4, r1\n\tjump.ge\t@.BB1_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI1_2[0], r5, r8\n\tjump.gt\t@.BB1_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB1_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB1_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB1_12\n\tadd\tr0, r0, r7\n.BB1_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB1_9\n.BB1_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB1_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB1_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB1_3:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\npacked_hashed_string_uint256_to_string_uint:\n.func_begin2:\n\tld.1\t64, r2\n\tld.1.inc\tr1, r1, r3\n\tsub!\tr1, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr1, r2, r3\n\tadd\t1, r0, r4\n\tst.1\tr3, r4\n\tadd\t@CPI2_0[0], r0, r3\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tadd\t32, r1, r1\n\tsub.s!\t@CPI2_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_4\n\tld\tr1, r1\n\tret\n.BB2_4:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 4068868313\nCPI0_3:\n\t.cell 2407356856\nCPI0_4:\n\t.cell 2030666648\nCPI0_5:\nCPI1_2:\n\t.cell 18446744073709551615\nCPI0_6:\n\t.cell 2535301200456458802993406410752\nCPI0_7:\nCPI1_1:\n\t.cell 18446744073709551616\nCPI0_8:\n\t.cell 18446744073709551487\nCPI0_9:\n\t.cell 18446744073709551551\nCPI0_10:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_11:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702948\nCPI0_12:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_13:\nCPI1_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_14:\nCPI1_4:\n\t.cell 2852213850513516153367582212096\nCPI1_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":"00010000000000020007000000000002000000000302001900000000000103550000008004000039000000400040043f00000000020100190000006002200270000000640220019700000001033001900000001b0000c13d000000040320008c0000005f0000413d000000000301043b000000e003300270000000660530009c000000230000613d000000670530009c000000380000613d000000680330009c0000005f0000c13d0000000003000416000000240420008c0000005f0000413d000000000303004b000000280000613d0000005f0000013d0000000001000416000000000101004b0000005f0000c13d00000020010000390000010000100443000001200000044300000065010000410000018a0001042e0000000003000416000000240420008c0000005f0000413d000000000303004b0000005f0000c13d0000000401100370000000000101043b000000690310009c0000005f0000213d00000004011000390189010f0000040f0189015e0000040f000000000101041a000000400200043d00000000001204350000006401000041000000640320009c000000000201801900000040012002100000006a011001c70000018a0001042e0000000003000416000000440520008c0000005f0000413d000000000303004b0000005f0000c13d0000000403100370000000000903043b0000002403100370000000000503043b000000690350009c0000005f0000213d0000002303500039000000000323004b0000005f0000813d0000000406500039000000000361034f000000000303043b0000006b0730009c000000520000813d0000001f07300039000000200a00008a0000000007a7016f0000003f077000390000000007a7016f0000006c0870009c000000580000a13d000000710100004100000000001004350000004101000039000000040010043f00000072010000410000018b000104300000008007700039000000400070043f000000800030043f00000000053500190000002405500039000000000225004b000000610000a13d00000000010000190000018b000104300000002002600039000000000121034f0000001f0230018f00000005053002720000006f0000613d00000000060000190000000507600210000000000871034f000000000808043b000000a00770003900000000008704350000000106600039000000000756004b000000670000413d000000000602004b0000007e0000613d0000000505500210000000000151034f0000000302200210000000a005500039000000000605043300000000062601cf000000000626022f000000000101043b0000010002200089000000000121022f00000000012101cf000000000161019f0000000000150435000000a0013000390000000000010435000000400100043d0000006d0210009c000000520000213d0000004002100039000000400020043f00000000029104360000000000420435000000000300041a000000690430009c000000520000213d0000000104300039000000000040041b0000000000000435000000000101043300000001033002100000006e04300041000000000014041b0000006f0430004100000000030204330000000065030434000000690150009c000000520000213d000000000104041a000000010210019000000001011002700000007f0710018f000000000701c0190000001f0170008c00000000010000190000000101002039000000000112004b000000a60000613d000000710100004100000000001004350000002201000039000000040010043f00000072010000410000018b00010430000200000006001d000100000003001d00040000000a001d000500000009001d000300000007001d000000200170008c000600000004001d000700000005001d000000cc0000413d000000000040043500000064010000410000000002000414000000640320009c0000000002018019000000c00120021000000070011001c70000801002000039018901840000040f00000001022001900000005f0000613d00000007050000290000001f025000390000000502200270000000200350008c0000000002004019000000000301043b00000003010000290000001f01100039000000050110027000000000011300190000000002230019000000000312004b0000000604000029000000cc0000813d000000000002041b0000000102200039000000000312004b000000c80000413d0000001f0150008c000000df0000a13d000000000040043500000064010000410000000002000414000000640320009c0000000002018019000000c00120021000000070011001c70000801002000039018901840000040f000000010220019000000004020000290000005f0000613d0000000703200180000000000101043b000000ec0000c13d0000002002000039000000f70000013d000000070100006b0000000001000019000000e40000613d0000000201000029000000000101043300000007040000290000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000001060000013d00000020020000390000000004000019000000010600002900000000056200190000000005050433000000000051041b000000200220003900000001011000390000002004400039000000000534004b000000ef0000413d000000070330006c000001030000813d00000007030000290000000303300210000000f80330018f000000010400008a000000000334022f000000000343013f00000001022000290000000002020433000000000232016f000000000021041b000000010100003900000007020000290000000102200210000000000112019f0000000602000029000000000012041b00000080010000390189015e0000040f0000000502000029000000000021041b00000000010000190000018a0001042e00000000030100190000001f013000390000007304000041000000000521004b0000000005000019000000000504401900000073062001970000007301100197000000000761004b000000000400a019000000000161013f000000730110009c000000000405c019000000000104004b0000015c0000613d0000000006000367000000000136034f000000000401043b0000006b0140009c000001560000813d0000001f01400039000000200500008a000000000151016f0000003f01100039000000000551016f000000400100043d0000000005510019000000000715004b00000000070000190000000107004039000000690850009c000001560000213d0000000107700190000001560000c13d000000400050043f000000000541043600000020033000390000000007430019000000000227004b0000015c0000213d000000000336034f0000001f0240018f0000000506400272000001440000613d000000000700001900000005087002100000000009850019000000000883034f000000000808043b00000000008904350000000107700039000000000867004b0000013c0000413d000000000702004b000001530000613d0000000506600210000000000363034f00000000066500190000000302200210000000000706043300000000072701cf000000000727022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000272019f000000000026043500000000024500190000000000020435000000000001042d000000710100004100000000001004350000004101000039000000040010043f00000072010000410000018b0001043000000000010000190000018b00010430000000400200043d0000000031010434000000000401004b0000016a0000613d000000000400001900000000052400190000000006430019000000000606043300000000006504350000002004400039000000000514004b000001630000413d0000000003210019000000010400003900000000004304350000006403000041000000640420009c000000000203801900000040022002100000002001100039000000640410009c00000000010380190000006001100210000000000121019f0000000002000414000000640420009c0000000002038019000000c002200210000000000112019f00000074011001c70000801002000039018901840000040f0000000102200190000001820000613d000000000101043b000000000001042d00000000010000190000018b0001043000000187002104230000000102000039000000000001042d0000000002000019000000000001042d00000189000004320000018a0001042e0000018b00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000f28600d9000000000000000000000000000000000000000000000000000000008f7d59b80000000000000000000000000000000000000000000000000000000079098398000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffff7f000000000000000000000000000000000000000000000000ffffffffffffffbf290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56402000000000000000000000000000000000000200000000000000000000000004e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000551e58c2b51b18d19759de558bd3639cde2ef9109dd92c61d0c431bbc61858dc"},"methodIdentifiers":{"addPeople(uint256,string)":"8f7d59b8","getFavoriteNumber(string)":"79098398","nametofn(string)":"f28600d9"}},"irOptimized":"/// @use-src 0:\"contracts/zkSync_SimpleStorage.sol\"\nobject \"SimpleStorage_50\" {\n    code {\n        {\n            /// @src 0:61:502  \"contract SimpleStorage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_50_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_50_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/zkSync_SimpleStorage.sol\"\n    object \"SimpleStorage_50_deployed\" {\n        code {\n            {\n                /// @src 0:61:502  \"contract SimpleStorage {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x79098398 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset := calldataload(_2)\n                        if gt(offset, 0xffffffffffffffff) { revert(_3, _3) }\n                        let _4 := sload(packed_hashed_string_uint256_to_string_uint(abi_decode_string(add(_2, offset), calldatasize())))\n                        let memPos := mload(_1)\n                        mstore(memPos, _4)\n                        return(memPos, 32)\n                    }\n                    case 0x8f7d59b8 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        let _5 := 36\n                        let offset_1 := calldataload(_5)\n                        let _6 := 0xffffffffffffffff\n                        if gt(offset_1, _6) { revert(_3, _3) }\n                        let value1 := abi_decode_string(add(_2, offset_1), calldatasize())\n                        let memPtr := mload(_1)\n                        let newFreePtr := add(memPtr, _1)\n                        if or(gt(newFreePtr, _6), lt(newFreePtr, memPtr))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _5)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr, value)\n                        let _7 := 32\n                        /// @src 0:317:334  \"Person(_fn,_name)\"\n                        let _8 := add(memPtr, /** @src 0:61:502  \"contract SimpleStorage {...\" */ _7)\n                        mstore(_8, value1)\n                        let oldLen := sload(_3)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _5)\n                        }\n                        let _9 := 1\n                        let _10 := add(oldLen, _9)\n                        sstore(_3, _10)\n                        if iszero(lt(oldLen, _10))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x32)\n                            revert(_3, _5)\n                        }\n                        mstore(_3, _3)\n                        let _11 := shl(_9, oldLen)\n                        sstore(add(18569430475105882587588266137607568536673111973893317399460219858819262702947, _11), mload(memPtr))\n                        let memberSlot := add(_11, 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564)\n                        let _12 := mload(_8)\n                        let newLen := mload(_12)\n                        if gt(newLen, _6)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _5)\n                        }\n                        let _13 := sload(memberSlot)\n                        let length := _3\n                        length := shr(_9, _13)\n                        let outOfPlaceEncoding := and(_13, _9)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, _7))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x22)\n                            revert(_3, _5)\n                        }\n                        if gt(length, 31)\n                        {\n                            mstore(_3, memberSlot)\n                            let data := keccak256(_3, _7)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _7) { deleteStart := data }\n                            let _14 := add(data, shr(5, add(length, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _14) { start := add(start, _9) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _7\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_3, memberSlot)\n                            let dstPtr := keccak256(_3, _7)\n                            let i := _3\n                            for { } lt(i, loopEnd) { i := add(i, _7) }\n                            {\n                                sstore(dstPtr, mload(add(_12, srcOffset)))\n                                dstPtr := add(dstPtr, _9)\n                                srcOffset := add(srcOffset, _7)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_12, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_9, newLen), _9))\n                        }\n                        default {\n                            let value_1 := _3\n                            if newLen\n                            {\n                                value_1 := mload(add(_12, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_1, not(shr(shl(3, newLen), not(0)))), shl(_9, newLen)))\n                        }\n                        sstore(packed_hashed_string_uint256_to_string_uint(/** @src 0:346:361  \"nametofn[_name]\" */ value1), /** @src 0:61:502  \"contract SimpleStorage {...\" */ value)\n                        return(_3, _3)\n                    }\n                    case 0xf28600d9 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset_2 := calldataload(_2)\n                        if gt(offset_2, 0xffffffffffffffff) { revert(_3, _3) }\n                        let _15 := sload(packed_hashed_string_uint256_to_string_uint(abi_decode_string(add(_2, offset_2), calldatasize())))\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, _15)\n                        return(memPos_1, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                let _2 := 0xffffffffffffffff\n                if gt(_1, _2)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:61:502  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:61:502  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                let _3 := not(31)\n                let memPtr := mload(64)\n                let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n                if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:61:502  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:61:502  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:61:502  \"contract SimpleStorage {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:61:502  \"contract SimpleStorage {...\"\n                array := memPtr\n            }\n            function packed_hashed_string_uint256_to_string_uint(var) -> hash\n            {\n                let pos := mload(64)\n                let length := mload(var)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 0:61:502  \"contract SimpleStorage {...\"\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    mstore(add(pos, i), mload(add(add(var, i), 0x20)))\n                }\n                let _1 := add(pos, length)\n                mstore(_1, /** @src 0:476:484  \"nametofn\" */ 0x01)\n                /// @src 0:61:502  \"contract SimpleStorage {...\"\n                hash := keccak256(pos, add(sub(_1, pos), 0x20))\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122014718bfa7e0b6fb91c2c87009fbdac00a1f257e2ce00852cce56f3de1ae685f064736f6c63430008180033\"\n    }\n}\n","hash":"0100007776097d9c4f059b705302c8e7e8f14a60fe7144207f1a639460254040","factoryDependencies":{}}}}}}